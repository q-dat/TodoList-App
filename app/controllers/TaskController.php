<?php
require_once __DIR__ . '/../../app/models/Task.php';

class TaskController
{
    private $taskModel;

    public function __construct()
    {
        $this->taskModel = new Task();
    }

    // üìå API: L·∫•y t·∫•t c·∫£ task
    public function index()
    {
        $tasks = $this->taskModel->getAll();
        $this->jsonSuccess($tasks, 'L·∫•y danh s√°ch task th√†nh c√¥ng');
    }

    // üìå API: T·∫°o task m·ªõi
    public function store()
    {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            return $this->jsonError('Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£', 405);
        }

        $title = trim($_POST['title'] ?? '');
        $description = trim($_POST['description'] ?? '');
        $status = $_POST['status'] ?? 'pending';
        $due_date = $_POST['due_date'] ?? null;

        if (empty($title) || empty($description)) {
            return $this->jsonError('Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng', 400);
        }

        $success = $this->taskModel->create($title, $description, $status, $due_date);

        if ($success) {
            $this->jsonSuccess(null, 'T·∫°o task th√†nh c√¥ng', 201);
        } else {
            $this->jsonError('Kh√¥ng th·ªÉ t·∫°o task', 500);
        }
    }

    // üìå API: L·∫•y chi ti·∫øt task theo ID
    public function show($id)
    {
        $task = $this->taskModel->find($id);

        if (!$task) {
            return $this->jsonError("Kh√¥ng t√¨m th·∫•y task v·ªõi ID = $id", 404);
        }

        $this->jsonSuccess($task, "L·∫•y chi ti·∫øt task ID = $id th√†nh c√¥ng");
    }

    // üìå API: C·∫≠p nh·∫≠t task theo ID
    public function update($id)
    {
        // ƒê·ªçc d·ªØ li·ªáu t·ª´ PUT request
        parse_str(file_get_contents("php://input"), $_PUT);

        $title = trim($_PUT['title'] ?? '');
        $description = trim($_PUT['description'] ?? '');
        $status = $_PUT['status'] ?? 'pending';
        $due_date = $_PUT['due_date'] ?? null;

        if (empty($title) || empty($description)) {
            return $this->jsonError('Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng', 400);
        }

        $success = $this->taskModel->update($id, $title, $description, $status, $due_date);

        if ($success) {
            $this->jsonSuccess(null, "C·∫≠p nh·∫≠t task ID = $id th√†nh c√¥ng");
        } else {
            $this->jsonError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t task ID = $id", 500);
        }
    }

    // üìå API: X√≥a task theo ID
    public function destroy($id)
    {
        $success = $this->taskModel->delete($id);

        if ($success) {
            $this->jsonSuccess(null, "X√≥a task ID = $id th√†nh c√¥ng");
        } else {
            $this->jsonError("Kh√¥ng th·ªÉ x√≥a task ID = $id", 500);
        }
    }

    // ‚úÖ Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng v·ªÅ d·∫°ng JSON
    private function jsonSuccess($data = null, $message = 'Th√†nh c√¥ng', $statusCode = 200)
    {
        $this->jsonResponse([
            'success' => true,
            'message' => $message,
            'data'    => $data
        ], $statusCode);
    }

    // ‚ùå Tr·∫£ l·ªói v·ªÅ d·∫°ng JSON
    private function jsonError($message = 'ƒê√£ x·∫£y ra l·ªói', $statusCode = 400)
    {
        $this->jsonResponse([
            'success' => false,
            'message' => $message
        ], $statusCode);
    }

    // ‚öôÔ∏è G·ª≠i d·ªØ li·ªáu JSON v·ªÅ client
    private function jsonResponse($data, $statusCode = 200)
    {
        http_response_code($statusCode);
        header('Content-Type: application/json; charset=utf-8');
        echo json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
        exit;
    }
}
